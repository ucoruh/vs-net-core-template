name: .NET Core Release with Test Coverage Control

on:
  push:
    #branches:
    #  - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  coverage:
    name: Check Unit Test Coverage %100
    runs-on: windows-latest
    permissions:
        contents: read
        issues: read
        checks: write
        pull-requests: write
    steps:
      - name: Checkout Source Code from Github
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        
      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./CalculatorLibrary.Tests

      - name: Install coverlet.msbuild
        run: dotnet add package coverlet.msbuild
        working-directory: ./CalculatorLibrary.Tests

      #- name: Build
      #  run: dotnet build --configuration Release
      #  working-directory: ./CalculatorLibrary.Tests

      - name: Test with Coverage
        run: dotnet test --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory:./TestResults --logger:trx
        working-directory: ./CalculatorLibrary.Tests

      - name: Check Test Coverage
        run: |
            $ErrorActionPreference = 'Stop'
            $coverageThreshold = 100.00
            $coverageReportPath = Get-ChildItem -Recurse -Filter 'coverage.cobertura.xml' | Select-Object -ExpandProperty FullName
            $lines = Get-Content $coverageReportPath
            $xmlContent = $lines -join "`n"
            $coverageXmlList = $xmlContent -split "<\?xml"
            $totalLines = 0
            $coveredLines = 0
            foreach ($coverageXmlString in $coverageXmlList) {
                if ($coverageXmlString.Trim() -ne '') {
                    $coverageXmlString = "<?xml" + $coverageXmlString
                    [xml]$coverageXml = $coverageXmlString
                    $lineRate = $coverageXml.SelectSingleNode("//coverage").GetAttribute("line-rate")
                    $coverage = [float]$lineRate * 100.00
                    if ($coverage -lt $coverageThreshold) {
                        Write-Host "Current test coverage is below the threshold of $coverageThreshold%."
                        Write-Host "Current test coverage: $coverage%."
                        exit 1
                    }
                }
            }
        shell: powershell
  build:
    name: .NET Core Doxygen + Test +  Release (Windows/Linux/MacOS)
    needs: coverage
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
    steps:
      - name: Checkout Source Code from Github
        uses: actions/checkout@v3
        
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        
      - name: Install Doxygen
        run: sudo apt-get install doxygen -y
        shell: bash
        
      - name: Install Report Generator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool
        shell: bash

      - name: Generate Documentation
        run: doxygen Doxyfile
        shell: bash
        
      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./CalculatorLibrary.Tests

      - name: Install coverlet.msbuild
        run: dotnet add package coverlet.msbuild --version 3.1.0
        working-directory: ./CalculatorLibrary.Tests

      - name: Build
        run: dotnet build --configuration Release
        working-directory: ./CalculatorLibrary.Tests

      - name: Test with Coverage
        run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory:./TestResults --logger:trx
        working-directory: ./CalculatorLibrary.Tests

      - name: Generate Coverage Report
        run: reportgenerator "-reports:**/coverage.cobertura.xml" "-targetdir:coveragereport" -reporttypes:Html
        
      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: CalculatorLibrary.Tests/**/coverage.cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'
          
      - name: Upload Code Coverage Results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-results
          path: code-coverage-results.md
        
      - name: Build/Publish  for Linux
        run: dotnet publish -c Release -r linux-x64 --self-contained true -o publish/linux

      - name: Build/Publish  for macOS
        run: dotnet publish -c Release -r osx-x64 --self-contained true -o publish/macos

      - name: Build/Publish  for Windows
        run: dotnet publish -c Release -r win-x64 --self-contained true -o publish/windows

      - name: Get Commit Summary
        id: commit_summary
        run: echo "::set-output name=summary::$(git log --format=%B -n 10 ${{ github.sha }})"

      - name: Create Release
        id: create_common_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.NET_CORE_TEMPLATE_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this release:
            ${{ steps.commit_summary.outputs.summary }}
            
            Dr. Ugur CORUH
          draft: false
          prerelease: false
        
      - name: Compress Linux binaries
        run: tar -czvf linux-binaries.tar.gz -C publish/linux .

      - name: Compress macOS binaries
        run: tar -czvf macos-binaries.tar.gz -C publish/macos .

      - name: Compress Windows binaries
        run: tar -czvf windows-binaries.tar.gz -C publish/windows .
        
      - name: Compress Test Coverage Report
        run: tar -czvf application-test-report.tar.gz -C coveragereport .
        
      - name: Compress Doxygen Output (HTML/XML/Latex/RTF)
        run: tar -czvf application-documentation.tar.gz -C docs .
        
      - name: Upload Linux release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_common_release.outputs.upload_url }}
          asset_path: ./linux-binaries.tar.gz
          asset_name: linux-binaries.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.NET_CORE_TEMPLATE_TOKEN }}

      - name: Upload macOS release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_common_release.outputs.upload_url }}
          asset_path: ./macos-binaries.tar.gz
          asset_name: macos-binaries.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.NET_CORE_TEMPLATE_TOKEN }}

      - name: Upload Windows release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_common_release.outputs.upload_url }}
          asset_path: ./windows-binaries.tar.gz
          asset_name: windows-binaries.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.NET_CORE_TEMPLATE_TOKEN }}
        
      - name: Upload Test Converage HTML Report to release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_common_release.outputs.upload_url }}
          asset_path: ./application-test-report.tar.gz
          asset_name: application-test-report.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.NET_CORE_TEMPLATE_TOKEN }}
          
      - name: Upload Doxygen Output to release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_common_release.outputs.upload_url }}
          asset_path: ./application-documentation.tar.gz
          asset_name: application-documentation.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.NET_CORE_TEMPLATE_TOKEN }}

      # https://github.com/peaceiris/actions-gh-pages
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.NET_CORE_TEMPLATE_TOKEN }}
          publish_dir: ./docs/html
